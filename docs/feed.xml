<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Jottings</title>
    <link>http://localhost:8820/</link>
    <atom:link href="http://localhost:8820//feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-gb</language>
    <pubDate>Sat, 1 Apr 2023 21:06:44 +0300</pubDate>
    <lastBuildDate>Sat, 1 Apr 2023 21:06:44 +0300</lastBuildDate>

    <item>
      <title>Using File APIs</title>
      <link>http://localhost:8820//java-jottings/java-fundamentals/using-file-apis.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:34 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/java-fundamentals/using-file-apis.html</guid>
      <description><pre><code class="language-java">import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List; 

public class App {
    public static void main(String[] args) throws Exception {
        //Writing files 
		String text = &quot;This is a test&quot;;
        try{
            Files.write(Paths.get(&quot;file.txt&quot;), text.getBytes(), StandardOpenOption.CREATE);
            System.out.println(&quot;File wrote successfully&quot;);
        } catch (IOException exception){
            System.out.println(&quot;it wasn't possible to write the file&quot;);
        }
        
        //Reading files
        try{
            List&lt;String&gt; textRead = Files.readAllLines(Paths.get(&quot;file.txt&quot;));
            for(String line: textRead)
                System.out.println(line);
		} catch (IOException exception){
            System.out.println(&quot;it wasn't possible to read the file&quot;);
        } 
        //Manipulating Paths
        Path path = Paths.get(&quot;.&quot;,&quot;file.txt&quot;);
        
        //Deleting
        try{
	        Files.delete(path);
        }catch (IOException exception){
            System.out.println(&quot;it wasn't possible to delete the file&quot;);
        }     
	}
}
</code></p></description>	  
    </item><item>
      <title>Packages</title>
      <link>http://localhost:8820//java-jottings/java-fundamentals/packages.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:30 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/java-fundamentals/packages.html</guid>
      <description><p><strong>java package</strong> is a group of similar types of classes, interfaces and sub-packages.</p></description>	  
    </item><item>
      <title>main Method</title>
      <link>http://localhost:8820//java-jottings/java-fundamentals/main-method.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:28 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/java-fundamentals/main-method.html</guid>
      <description><p>The <code>main()</code> method is a special method in Java that serves as the entry point of a Java application. When you run a Java program, the JVM (Java Virtual Machine) calls the <code>main()</code> method to start the execution of the program.</p></description>	  
    </item><item>
      <title>Java Basic Syntax</title>
      <link>http://localhost:8820//java-jottings/java-fundamentals/java-basic-syntax.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:26 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/java-fundamentals/java-basic-syntax.html</guid>
      <description><p>Java programs are organized into Classes, which are defined using the <code>class</code> keyword. For example, the following code defines a class named <code>MyClass</code>:</p></description>	  
    </item><item>
      <title>Java Data Types and Variables</title>
      <link>http://localhost:8820//java-jottings/java-fundamentals/data-types-and-variables.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:22 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/java-fundamentals/data-types-and-variables.html</guid>
      <description><p>Java is a strongly-typed language, which means that all variables must have a declared data type. Variables are used to store values in memory. In Java, you declare a variable by specifying its data type and name.</p></description>	  
    </item><item>
      <title>Stacks</title>
      <link>http://localhost:8820//java-jottings/data-structures/stacks.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:20 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/data-structures/stacks.html</guid>
      <description><p>There are several advantages of using a stack data structure:</p></description>	  
    </item><item>
      <title>Sets</title>
      <link>http://localhost:8820//java-jottings/data-structures/sets.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:15 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/data-structures/sets.html</guid>
      <description><p>A set is a collection of elements that contains no duplicates. In Java, sets are represented by the <code>Set</code> interface and implemented by several classes, including <code>HashSet</code>, <code>LinkedHashSet</code>, and <code>TreeSet</code>.</p></description>	  
    </item><item>
      <title>Linked List</title>
      <link>http://localhost:8820//java-jottings/data-structures/linked-list.html</link>
      <pubDate>Sat, 1 Apr 2023 20:45:12 +0300</pubDate>
      <guid isPermaLink="false">java-jottings/data-structures/linked-list.html</guid>
      <description><pre><code class="language-java">public class LinkedListNode {
    int val;
    LinkedListNode next;
    
    public LinkedListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class LinkedList {
    LinkedListNode head;

    public LinkedList() {
        this.head = null;
    }

    public void add(int val) {
        LinkedListNode node = new LinkedListNode(val);
        if (head == null) {
            head = node;
        } else {
            LinkedListNode curr = head;
            while (curr.next != null) {
                curr = curr.next;
            }
            curr.next = node;
        }
    }

    public void printList() {
        LinkedListNode curr = head;
        while (curr != null) {
            System.out.print(curr.val + &quot; &quot;);
            curr = curr.next;
        }
        System.out.println();
    }
}

// Example usage:
LinkedList list = new LinkedList();
list.add(1);
list.add(2);
list.add(3);
list.printList(); // Output: 1 2 3

</code></p></description>	  
    </item>

  </channel> 
</rss>
